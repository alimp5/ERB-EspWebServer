// A2_Main.h

/*
 * Copyright (c) 2015, Eldon R. Brown - ERB - WA0UWH - eldonb@ebcon.com
 *
 * See my Blog, at: http://WA0UWH.blogspot.com
 *
 * See my Source at GitHub, at: https://github.com/wa0uwh/ERB-EspWebServer
 *
 * All rights reserved. See FULL Copyright in Main or Info Page for Exclusions
 *
 * This Effort was Inspired by work by: Majenko Technologies - 2015 Esp8266 AdvancedWebServer
 *
 * See also Arduino IDE, at: https://github.com/esp8266/Arduino
 */


#ifndef MAIN_H
#define MAIN_H

#include <pgmspace.h>


const char COPYRIGHT1[] PROGMEM = R"(
     /*
      * Copyright (c) 2015, Eldon R. Brown - ERB - WA0UWH - eldonb@ebcon.com
      *
      * See my Blog, at: http://WA0UWH.blogspot.com
      *
      * See my Source at GitHub, at: https://github.com/wa0uwh/ERB-EspWebServer
      *
      * All rights reserved. See FULL Copyright in Main.ino, or Info Web Page for Exclusions
      *
      * This Effort was Inspired by work by: Majenko Technologies - 2015 Esp8266 AdvancedWebServer
      *
      * See also Arduino IDE, at: https://github.com/esp8266/Arduino
      *
      * Contritutors:
      *
      *
      */
)";


const char INTRODUCTION[] PROGMEM = R"(
    /*
     * This Program Provides the following for the Esp8266 as a WebServer:
     * But CAUTION, some functionallity may not have been throughly tested.
     *
     * The code and effort is always changing, check with the GitHub Repositor often,
     *     See GitHub at:     https://github.com/wa0uwh/ERB-EspWebServer
     *     See Change Map at: https://github.com/wa0uwh/ERB-EspWebServer/network
     *
     * The purpose of the program is to provide an Experimental Enviroment in which
     * to create new functions that can be used in my other planned projects.
     *
     * Currently, all Arduino IDE TABS are '.ino' type files, which are compiled as a
     * single blob. The structure of this progame could be better, as normally, the TABS
     * should be set up as '*.h', '*.c', or '*.cpp' files, but this is easier and quicker
     * for my experimental efforts. Future revisions may be properly constructed.
     * 
     * Current Features:
     *
     *      All Web Pages are Dynamically Generated by The Esp8266 Processor
     *      Implemented Full (1460 bytes) WIFI Buffered Transfers
     *      All String Constants are saved in Flash, freeing RAM/Heap, via F(),
     *          sF(), and FMT() macros.
     *      Uses ICACHE_FLASH_ATTR to dynamically load seldom used program functions
     *      Copyright and this Text (Introduction) is Compiled into the Executable as
     *          a Web Page
     *      Home Page Dashboard
     *      Help Page
     *      Admin Page, with WiFi Scan and Network Selection
     *      Page Navigator and Resource Links
     *      Raw Data Query
     *      NTP Network Time (Unix Epoch)
     *      mDNS Service/Client
     *      Optional Page AutoRefresh
     *      Auto AP Timeout
     *      Implements and uses Html 'meter' function for FreeHeap and Vdd
     *      Implemented SVG 12/24 Hour Clock
     *      Implemented SVG Gauge for FreeHeap
     *      Implemented SVG Gauge for Vdd
     *      Implemented SVG Line Graph for FreeHeap Historical Data, with Start and
     *          End of Page Markersand reduced Data Transfer by removing Duplicate
     *          Y Data Points
     *      Implemented Data Creation Rate Per Web Page Function
     *      Implemented a Used CPU Seconds Value for Display
     *      Implemented a link to a Visitor Map Display
     *      Implemented Slider Bars, Currently used for Page Refresh Interval
     *      Implemented Code to Serve Raw BINARY Data, for example: the Farm Server Image on Info Page
     *      Moved Bulk Assignments to use 'PROGMEM = R(...)' Syntax,
     *          See: http://en.cppreference.com/w/cpp/language/string_literal
     */
)";


    extern "C" {
        #include "user_interface.h"
        uint16 readvdd33(void);
    }

    // Page Type being Sent
    enum {
      HOMEPAGE = 0,
      HELPPAGE,
      ADMINPAGE,
      INFOPAGE,
    };
    
   
    enum { // Send Buffer Mode
      SEND_WITH_BUFFERING = 0,
      SEND_BUFFER_NOW,
      SEND_FINISH,
    };
 
    // Define Multipliers for Ms Counters
    #define MSECs (1)
    #define SECs (MSECs * 1000)
    #define MINs (SECs * 60)
    #define HRs  (MINs * 60)
    #define DAYs (HRs * 24)
    #define WKs  (DAYs * 7)

    
    // ERB - Force format stings and string constants into FLASH Memory
    #define sF(x) (String) F(x)                // Used as an F() is being used as the first Element of a Multi-Element Expression
    #define FMT(x) strcpy_P(gFmtBuf, PSTR(x))  // Used with printf() for the format string
    // USE WITH CAUTION !
    
    #define VddScaleLo (2900)
    #define VddScaleHi (3700)
    
    #define FreeHeapScaleLo (4000)
    #define FreeHeapScaleHi (20000)


    
    #define DEBUG_MONITOR_REPORT_START() Serial.println ( sF("\nStart ") + String( __func__ )\
            + F(" Build for: ")\
            + String(ipa2str(gServer.client().remoteIP())) +F(" . . ") )

    #define DEBUG_MONITOR_REPORT_END() Serial.println ( sF("  . . Finshed ") + String( __func__ )\
            + F(" Build") )

    #define DEBUG_MONITOR_REPORT_TOTAL() Serial.println( sF("Sent: ") + String(__func__)\
            + F(", URI: ") + gServer.uri()\
            + F(", FreeHeap: ") + String( ESP.getFreeHeap() / 1000.0, 3 )\
            + F(", PageSize: ") + String( sz / 1000.0, 3 )\
            + F(", Hits: ") + String(gHits) + F("\r\n") )

    #define DEBUG_MONITOR_REPORT_ANONYMOUS_FUNCTION() Serial.println( sF("Sent: Data for Query")\
            + F(", URI: ") + gServer.uri()\
            + F(" for: ")\
            + String(ipa2str(gServer.client().remoteIP()) )\
            + F(", Hits: ") + String(gHits) + F("\r\n") )

    // Shorthand for the above
    #define DMRAF() DEBUG_MONITOR_REPORT_ANONYMOUS_FUNCTION()
            
    #define DEBUG_MONITOR_REPORT_ARGS() if ( gServer.args() ) {\
              Serial.println(" Args:");\
              for ( byte i = 0; i < gServer.args(); i++ )\
                  Serial.println( "  " + gServer.argName(i) + "=" + gServer.arg(i) );\
            }




    
    const char COPYRIGHT2[] PROGMEM = R"(
     /*
      * Redistribution and use in source and binary forms, with or without modification,
      * are permitted provided that the following conditions are met:
      * 
      * * Redistributions of source code must retain the above copyright notice, this
      *   list of conditions and the following disclaimer.
      *
      * * Redistributions in binary form must reproduce the above copyright notice, this
      *   list of conditions and the following disclaimer in the documentation and/or
      *   other materials provided with the distribution.
      * 
      * * Neither the name of Majenko Technologies nor the names of its
      *   contributors may be used to endorse or promote products derived from
      *   this software without specific prior written permission.
      */
     )";

    
    const char COPYRIGHT3[] PROGMEM = R"(
     /*
      * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND ANY
      * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
      * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
      * SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,INCIDENTAL,
      * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
      * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
      * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
      * TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
      * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
      */
     )";
    
    // This is a 10Kb character Test Pattern, Note: this is "optomized out" if not used, see Info Code Page
    const char TEST_10Kb[] PROGMEM = R"(
     /* 
      * THIS IS A 1KB TEST BLOCK ---- 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 
      * THIS IS A 1KB TEST BLOCK ---- 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 
      * THIS IS A 1KB TEST BLOCK ---- 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 
      * THIS IS A 1KB TEST BLOCK ---- 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 
      * THIS IS A 1KB TEST BLOCK ---- 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 
      * THIS IS A 1KB TEST BLOCK ---- 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 
      * THIS IS A 1KB TEST BLOCK ---- 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 
      * THIS IS A 1KB TEST BLOCK ---- 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 
      * THIS IS A 1KB TEST BLOCK ---- 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 
      * THIS IS A 1KB TEST BLOCK ---- 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      * 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
      *
      */
     )";

#endif

// ###########################################################
// End
